#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Preferences.h>
#include <ArduinoSTL.h>
#include <vector>
#include <algorithm>

std::vector<String> admins;
std::vector<String> users;

Preferences preferences;

#define WIFI_SSID ""
#define WIFI_PASSWORD ""
// Telegram BOT Token (Get from Botfather)
#define BOT_TOKEN ""

const char* TELEGRAM_CERTIFICATE_ROOT = \
"-----BEGIN CERTIFICATE-----\n" \
... // Hier das vollständige Telegram-Zertifikat einfügen
"-----END CERTIFICATE-----\n";

int number = 1;
int auth; //0=unauthorized 1=user, 2 = admin

const unsigned long BOT_MTBS = 1000; // mean time between scan messages

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime; // last time messages' scan has been done

void checkUser(String userid, String username) {
  auth = 0;
  auto it = std::find(admins.begin(), admins.end(), userid);
  if (it != admins.end()) {
    auth = 2;
  }
  if (!auth) {
    it = std::find(users.begin(), users.end(), userid);
    if (it != users.end()) {
      auth = 1;
    }
  }
  if (!auth) {
    bot.sendMessage(userid, "You are not verified yet, but don't worry admins will have a look at your request");
    bot.sendMessage(" ", String(username) + " requested verification. To accept type /useraccept" + String(userid));
  }
}

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    Serial.println(text);
    checkUser(chat_id, from_name);
    if (auth) {
      if (from_name == "")
        from_name = "Guest";
      Serial.println(from_name);

      if (text == "/send_test_action") {
        bot.sendChatAction(chat_id, "typing");
        delay(4000);
        bot.sendMessage(chat_id, "Did you see the action message?");
      }

      if (text == "/start") {
        String welcome = "Welcome to Universal Arduino Telegram Bot library, " + from_name + ".\n";
        welcome += "This is Chat Action Bot example.\n\n";
        welcome += "/send_test_action : to send test chat action message\n";
        bot.sendMessage(chat_id, welcome);
      }

      if (text.indexOf("/adduser") >= 0 && auth == 2) {
        text.remove(0, 9);
        users.push_back(text);
        Serial.println("added" + String(text));
        bot.sendMessage(chat_id, "user was added");
        bot.sendMessage(text, "Welcome! An admin just accepted you for using this bot.");
      }

      if (text.indexOf("/addadmin") >= 0) {
        if (auth == 2) {
          text.remove(0, 9);
          admins.push_back(text);
          auto it = std::find(users.begin(), users.end(), text);
          if (it != users.end()) {
            users.erase(it);
          }
        }
      }

      if (text == "/save") {
        if (auth == 2) {
          for (int i = 0; i < users.size(); i++) {
            String key = "user" + String(i);
            String value = String(users[i]);
            preferences.putString(key.c_str(), value.c_str());
          }
          for (int j = 0; j < admins.size(); j++) {
            String key = "admin" + String(j);
            String value = String(admins[j]);
            preferences.putString(key.c_str(), value.c_str());
          }
          preferences.putInt("numadmins", admins.size());
          preferences.putInt("numusers", users.size());
        } else {
          String message = "You are not authorized to do that";
          bot.sendMessage(chat_id, message);
        }
      }

      if (text == "/clearbackup") {
        if (auth == 2) {
          for (int i = 0; i < admins.size(); i++) {
            String name = "admin" + String(i);
            preferences.remove(name.c_str());
          }
          for (int j = 0; j < users.size(); j++) {
            String name = "user" + String(j);
            preferences.remove(name.c_str());
          }
        } else {
          String message = "You are not authorized to do that";
          bot.sendMessage(chat_id, message);
        }
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println();

  // attempt to connect to Wifi network:
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  preferences.begin("storage", false);
  int numadmins = preferences.getInt("numadmins", 0);
  int numusers = preferences.getInt("numusers", 0);
  for (int i = 0; i < numadmins; i++) {
    String key = "admin" + String(i);
    String user = preferences.getString(key.c_str(), "default");
    admins.push_back(user);
  }
  for (int i = 0; i < numusers; i++) {
    String key = "user" + String(i);
    String user = preferences.getString(key.c_str(), "default");
    users.push_back(user);
  }
  preferences.end(); // Schließen der Preferences am Ende von setup
}

void loop() {
  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("new message");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}
